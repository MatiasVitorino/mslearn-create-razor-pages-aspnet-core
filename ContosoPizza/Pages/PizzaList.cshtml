@page
@model ContosoPizza.Pages.PizzaListModel
@using ContosoPizza.Models

@{
    ViewData["Title"] = "Pizza Menu";
}

<div class="hero-menu text-center mb-4 p-4 rounded">
    <div class="hero-content">
        <h1 class="display-4 mb-3 text-light fw-bold">Our Pizza Menu</h1>
        <p class="lead text-light opacity-75 mb-0">Discover our delicious selection of hand-crafted pizzas</p>
    </div>
</div>

<div class="card bg-dark text-light shadow-sm mb-4">
    <div class="card-body p-4">
        <div class="table-responsive">
        <table class="table table-dark">
                <thead>
                    <tr>
                        <th scope="col">Pizza</th>
                        <th scope="col">Price</th>
                        <th scope="col">Size</th>
                        <th scope="col" class="text-center">Gluten Free</th>
                        <th scope="col" class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var pizza in Model.PizzaList)
                {
                    <tr>
                        <td class="align-middle">
                            <i class="fas fa-pizza-slice text-primary me-2"></i>
                            @pizza.Name
                        </td>
                        <td class="align-middle">@($"{pizza.Price:C}")</td>
                        <td class="align-middle">
                            <span class="align-middle">@pizza.Size</span>
                        </td>
                        <td class="text-center align-middle">
                            @if(pizza.IsGlutenFree)
                            {
                                <span class="badge bg-success"><i class="fas fa-check me-1"></i></span>
                            }
                        </td>
                        <td class="text-end align-middle">
                            <form method="post" asp-page-handler="Delete" asp-route-id="@pizza.Id" class="d-inline">
                                <button class="btn btn-danger btn-sm delete-pizza-btn">
                                    <i class="fas fa-trash me-1"></i>
                                </button>
                            </form>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        @if (Model.TotalPages > 1)
        {
            <div class="d-flex justify-content-center mt-4">
                <nav aria-label="Pizza menu navigation">
                    <ul class="pagination">
                        @if (Model.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link bg-dark text-light border-secondary" 
                                   asp-page="./PizzaList" 
                                   asp-route-currentPage="@(Model.CurrentPage - 1)">
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                            </li>
                        }

                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link bg-dark text-light border-secondary" 
                                   asp-page="./PizzaList" 
                                   asp-route-currentPage="@i">@i</a>
                            </li>
                        }

                        @if (Model.CurrentPage < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link bg-dark text-light border-secondary" 
                                   asp-page="./PizzaList" 
                                   asp-route-currentPage="@(Model.CurrentPage + 1)">
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
<!-- Replace the existing Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">
                    <i class="fas fa-trash-alt me-2 text-danger"></i>
                    Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Are you sure you want to delete this pizza?</p>
                <p class="text-muted small mb-0 mt-2">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-danger" id="confirmDelete">
                    <i class="fas fa-trash-alt me-2"></i>Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add this script section at the bottom of the file -->
<script>
    let deleteForm;

    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById('deleteConfirmationModal');
        const confirmBtn = document.getElementById('confirmDelete');

        // Store the clicked form and show modal
        const deleteBtns = document.querySelectorAll('.delete-pizza-btn');
        deleteBtns.forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                deleteForm = this.closest('form');
                const deleteModal = new bootstrap.Modal(modal);
                deleteModal.show();
            });
        });

        // Handle confirm delete
        confirmBtn.addEventListener('click', function() {
            if (deleteForm) {
                deleteForm.submit();
            }
        });
    });
</script>

<style>
.table {
    margin-bottom: 0;
}

.table > :not(caption) > * > * {
    padding: 0.75rem 1.5rem; /* Reduce table cell padding */
}

.badge {
    font-weight: 500;
    padding: 0.5em 0.75em;
}

.btn-danger {
    background-color: #dc3545;
    border-color: #dc3545;
}

.btn-danger:hover {
    background-color: #bb2d3b;
    border-color: #b02a37;
}

.table-dark {
    --bs-table-bg: transparent;
    --bs-table-striped-bg: rgba(255, 255, 255, 0.05);
    --bs-table-hover-bg: rgba(255, 255, 255, 0.075);
}

.hero-menu {
    background-position: center;
    border-radius: 15px;
    position: relative;
    margin-top: -1rem; /* Add negative margin to move everything up */
}

.hero-content {
    position: relative;
    z-index: 1;
}

.divider {
    width: 80px;
    height: 4px;
    background: #ff6b6b;
    border-radius: 2px;
}

.display-3 {
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.lead {
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
}

.pagination .page-link:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

.pagination .active .page-link {
    background-color: #ff6b6b;
    border-color: #ff6b6b;
}

.pagination .page-link:focus {
    box-shadow: 0 0 0 0.25rem rgba(255, 107, 107, 0.25);
}

.card-body {
    padding: 1.5rem; /* Reduce card padding */
}

/* Add these styles to your existing <style> section */
.modal-dialog {
    max-width: 400px;
}

.modal-content {
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
    border-radius: 10px;
}

.modal-header {
    background-color: rgba(255, 255, 255, 0.05);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    padding: 1.5rem;
}

.modal-body {
    padding: 2rem;
    text-align: center;
    font-size: 1.1rem;
}

.modal-footer {
    background-color: rgba(255, 255, 255, 0.02);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding: 1rem;
    gap: 10px;
}

.modal-title {
    font-weight: 600;
    color: #fff;
}

.btn-close-white {
    opacity: 0.7;
    transition: opacity 0.2s;
}

.btn-close-white:hover {
    opacity: 1;
}

/* Style the modal buttons */
.modal .btn {
    padding: 0.5rem 1.5rem;
    font-weight: 500;
    border-radius: 6px;
    transition: all 0.2s;
}

.modal .btn-secondary {
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.modal .btn-secondary:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.3);
}

.modal .btn-danger {
    background-color: #dc3545;
    border: none;
}

.modal .btn-danger:hover {
    background-color: #bb2d3b;
    transform: translateY(-1px);
}

/* Add fade animation */
.modal.fade .modal-dialog {
    transition: transform 0.2s ease-out;
    transform: scale(0.95);
}

.modal.show .modal-dialog {
    transform: scale(1);
}
</style>